"use strict";
exports.__esModule = true;
exports.useOAuth = void 0;
var tslib_1 = require("tslib");
var clerk_react_1 = require("@clerk/clerk-react");
var AuthSession = tslib_1.__importStar(require("expo-auth-session"));
var WebBrowser = tslib_1.__importStar(require("expo-web-browser"));
function useOAuth(params) {
    var _a = params || {}, strategy = _a.strategy, redirectUrl = _a.redirectUrl;
    if (!strategy) {
        throw new Error('Missing oauth strategy');
    }
    var _b = (0, clerk_react_1.useSignIn)(), signIn = _b.signIn, setActive = _b.setActive, isSignInLoaded = _b.isLoaded;
    var _c = (0, clerk_react_1.useSignUp)(), signUp = _c.signUp, isSignUpLoaded = _c.isLoaded;
    function startOAuthFlow() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var oauthRedirectUrl, externalVerificationRedirectURL, result, _a, type, url, params, rotatingTokenNonce, status, firstFactorVerification, createdSessionId;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!isSignInLoaded || !isSignUpLoaded) {
                            return [2 /*return*/, {
                                    createdSessionId: null,
                                    signIn: signIn,
                                    signUp: signUp,
                                    setActive: setActive
                                }];
                        }
                        oauthRedirectUrl = redirectUrl ||
                            AuthSession.makeRedirectUri({
                                path: '/oauth-native-callback'
                            });
                        return [4 /*yield*/, signIn.create({ strategy: strategy, redirectUrl: oauthRedirectUrl })];
                    case 1:
                        _b.sent();
                        externalVerificationRedirectURL = signIn.firstFactorVerification.externalVerificationRedirectURL;
                        return [4 /*yield*/, WebBrowser.openAuthSessionAsync(externalVerificationRedirectURL.toString(), oauthRedirectUrl)];
                    case 2:
                        result = _b.sent();
                        _a = result || {}, type = _a.type, url = _a.url;
                        // TODO: Check all the possible AuthSession results
                        // https://docs.expo.dev/versions/latest/sdk/auth-session/#returns-7
                        if (type !== 'success') {
                            throw new Error('Something went wrong during the OAuth flow. Try again.');
                        }
                        params = new URL(url).searchParams;
                        rotatingTokenNonce = params.get('rotating_token_nonce') || '';
                        return [4 /*yield*/, signIn.reload({ rotatingTokenNonce: rotatingTokenNonce })];
                    case 3:
                        _b.sent();
                        status = signIn.status, firstFactorVerification = signIn.firstFactorVerification;
                        createdSessionId = '';
                        if (!(status === 'complete')) return [3 /*break*/, 4];
                        createdSessionId = signIn.createdSessionId;
                        return [3 /*break*/, 6];
                    case 4:
                        if (!(firstFactorVerification.status === 'transferable')) return [3 /*break*/, 6];
                        return [4 /*yield*/, signUp.create({
                                transfer: true
                            })];
                    case 5:
                        _b.sent();
                        createdSessionId = signUp.createdSessionId || '';
                        _b.label = 6;
                    case 6: return [2 /*return*/, { createdSessionId: createdSessionId, signIn: signIn, signUp: signUp, setActive: setActive }];
                }
            });
        });
    }
    return {
        startOAuthFlow: startOAuthFlow
    };
}
exports.useOAuth = useOAuth;
